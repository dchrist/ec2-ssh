#!/bin/sh 
#/ Usage: ec2-ssh <instance-name>
#/ Open ssh connection to EC2 instance where tag:Name=<instance-name>
#/ For list of instance, run ec2-host without any paramteres


USAGE="Usage: `basename $0` [-h] [-r region] <instance-name>"

# Parse command line options.
while getopts hr: OPT; do
    case "$OPT" in
        h)
            echo $USAGE >&2
            exit 1
            ;;
        r)
		REGION=$OPTARG

		
		# support user@instance-name format
		IFS="@"; declare -a hostparts=($3) 
	
		inst="${hostparts[1]}"
		user="${hostparts[0]}"
	
		if test -z "$inst"; then
			inst="$3"
			user="ubuntu"
		fi
		# get host from ec2-host command
		host=$(ec2-host -r $REGION $inst)

		# pass all other parameters (${@:2}) to ssh allowing
		# things like: ec2-ssh nginx uptime
		test -n "$host" && exec sh -c "ssh $user@$host ${@:4}"
		exit 0
            ;;
        \?)
            # getopts issues an error message
            echo $USAGE >&2
            exit 1
            ;;
    esac
done


# Remove the switches we parsed above.
#shift `expr $OPTIND - 1`

# We want at least one non-option argument.
# Remove this block if you don't need it.
if [ $# -eq 0 ]; then
    echo $USAGE >&2
    exit 1
fi


# support user@instance-name format
IFS="@"; declare -a hostparts=($1) 

inst="${hostparts[1]}"
user="${hostparts[0]}"

if test -z "$inst"; then
	inst="$1"
	user="ubuntu"
fi

if test -z "$REGION"; then
	REGION="us-east-1"
fi

# get host from ec2-host command
host=$(ec2-host -r $REGION $inst)

# pass all other parameters (${@:2}) to ssh allowing
# things like: ec2-ssh nginx uptime
test -n "$host" && exec sh -c "ssh $user@$host ${@:2}"
